var f=Object.defineProperty,d=(e,t,i)=>t in e?f(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,o=(e,t,i)=>d(e,"symbol"!=typeof t?t+"":t,i),F="[DETECTION]",g=["error","debug","warn"];function b(e){return(...t)=>{console[e](F,...t)}}var y=g.reduce(((e,t)=>(e[t]=b(t),e)),{}),i=y,l={positiveSpeechThreshold:.5,negativeSpeechThreshold:.35,preSpeechPadFrames:1,redemptionFrames:8,frameSamples:1536,minSpeechFrames:3,submitUserSpeechOnPause:!1},n=class{constructor(e){this.options=e,o(this,"inputBuffer"),o(this,"process",(e=>{let t=[];for(this.fillInputBuffer(e);this.hasEnoughDataForFrame();){let e=this.generateOutputFrame();t.push(e)}return t})),e.nativeSampleRate<16e3&&i.error("nativeSampleRate is too low. Should have 16000 = targetSampleRate <= nativeSampleRate"),this.inputBuffer=[]}*stream(e){for(this.fillInputBuffer(e);this.hasEnoughDataForFrame();)yield this.generateOutputFrame()}fillInputBuffer(e){for(let t of e)this.inputBuffer.push(t)}hasEnoughDataForFrame(){return this.inputBuffer.length*this.options.targetSampleRate/this.options.nativeSampleRate>=this.options.targetFrameSize}generateOutputFrame(){let e=new Float32Array(this.options.targetFrameSize),t=0,i=0;for(;t<this.options.targetFrameSize;){let r=0,s=0;for(;i<Math.min(this.inputBuffer.length,(t+1)*this.options.nativeSampleRate/this.options.targetSampleRate);){let e=this.inputBuffer[i];void 0!==e&&(r+=e,s++),i++}e[t]=r/s,t++}return this.inputBuffer=this.inputBuffer.slice(i),e}},Y={...l,ortConfig:void 0},c=class extends AudioWorkletProcessor{constructor(e){super(),o(this,"resampler"),o(this,"_initialized",!1),o(this,"_stopProcessing",!1),o(this,"options"),o(this,"init",(()=>{i.debug("initializing worklet"),this.resampler=new n({nativeSampleRate:sampleRate,targetSampleRate:16e3,targetFrameSize:this.options.frameSamples}),this._initialized=!0,i.debug("initialized worklet")})),this.options=e.processorOptions,this.port.onmessage=e=>{"SPEECH_STOP"===e.data.message&&(this._stopProcessing=!0)},this.init()}process(e,t,i){if(this._stopProcessing)return!1;let r=e[0][0];if(this._initialized&&r instanceof Float32Array){let e=this.resampler.process(r);for(let t of e)this.port.postMessage({message:"AUDIO_FRAME",data:t.buffer},[t.buffer])}return!0}};registerProcessor("voice-worklet",c);